package br.edu.furb.compilador.gals;

public interface ParserConstants
{
    int START_SYMBOL = 37;

    int FIRST_NON_TERMINAL    = 37;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1,  2,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1, -1, -1, -1,  7,  5, -1,  6,  8, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, 23, 21, -1, 22, 24, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, 14, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 15, 16, 17, -1, -1, 19, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 27, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 31, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 33, 33, 33, 33, -1, -1, 33, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 33, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, 39, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, 41, 41, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 44, 44, 44, 44, -1, -1, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 47, -1, 45, 45, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 48, 48, 48, 48, -1, -1, 50, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, 51, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1 },
        { -1, -1, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, 53, 53, -1, -1, -1, 53, -1, -1, 54, 54, 54, 54, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 56, 57, 58, -1, -1, -1, -1 },
        { -1, -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, 60, 60, -1, -1, -1, 60, -1, -1, 60, 60, 60, 60, 61, 62, -1, -1 },
        { -1, -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, 64, -1, -1, -1, 64, -1, -1, 64, 64, 64, 64, 64, 64, 65, 66 },
        { -1, -1, 67, 68, 69, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 72, 73, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 10, 13, 27, 38, 28 },
        { 40, 22, 39 },
        { 38 },
        {  0 },
        { 43, 41 },
        { 47 },
        { 51 },
        { 52 },
        { 54 },
        { 24, 45 },
        { 23, 59 },
        {  0 },
        {  3, 44 },
        { 21, 43 },
        {  0 },
        {  4 },
        {  5 },
        {  6 },
        { 16 },
        {  9 },
        { 46 },
        { 47 },
        { 51 },
        { 52 },
        { 54 },
        { 43, 23, 59 },
        { 12, 25, 48, 26 },
        { 50, 49 },
        { 22, 48 },
        {  0 },
        {  6, 21, 43 },
        { 43 },
        { 14, 25, 55, 26 },
        { 59, 56 },
        { 21, 55 },
        {  0 },
        { 11, 25, 59, 26, 27, 57, 28, 53 },
        {  0 },
        {  8, 27, 57, 28 },
        { 42, 22, 58 },
        {  0 },
        { 57 },
        { 17, 25, 59, 26,  7, 27, 57, 28 },
        { 15, 27, 57, 28, 17, 25, 59, 26 },
        { 61, 60 },
        {  0 },
        { 18, 61, 60 },
        { 19, 61, 60 },
        { 62 },
        { 16 },
        {  9 },
        { 20, 61 },
        { 65, 63 },
        {  0 },
        { 64, 65 },
        { 29 },
        { 30 },
        { 31 },
        { 32 },
        { 67, 66 },
        {  0 },
        { 33, 67, 66 },
        { 34, 67, 66 },
        { 69, 68 },
        {  0 },
        { 35, 69, 68 },
        { 36, 69, 68 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 25, 59, 26 },
        { 33, 69 },
        { 34, 69 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",//"Era esperado fim de programa",
        "esperado palavra_reservada",//"Era esperado palavra_reservada",
        "esperado identificador",//"Era esperado identificador",
        "esperado contante_int",//"Era esperado int",
        "esperado constante_float",//"Era esperado float",
        "esperado contante_string",//"Era esperado string",
        "esperado do",//"Era esperado do",
        "esperado else",//"Era esperado else",
        "esperado false",//"Era esperado false",
        "esperado fun",//"Era esperado fun",
        "esperado if",//"Era esperado if",
        "esperado in",//"Era esperado in",
        "esperado main",//"Era esperado main",
        "esperado out",//"Era esperado out",
        "esperado repeat",//"Era esperado repeat",
        "esperado true",//"Era esperado true",
        "esperado while",//"Era esperado while",
        "esperado &",//"Era esperado \"&\"",
        "esperado |",//"Era esperado \"|\"",
        "esperado !",//"Era esperado \"!\"",
        "esperado ,",//"Era esperado \",\"",
        "esperado ;",//"Era esperado \";\"",
        "esperado =",//"Era esperado \"=\"",
        "esperado :",//"Era esperado \":\"",
        "esperado (",//"Era esperado \"(\"",
        "esperado )",//"Era esperado \")\"",
        "esperado {",//"Era esperado \"{\"",
        "esperado }",//"Era esperado \"}\"",
        "esperado ==",//"Era esperado \"==\"",
        "esperado !=",//"Era esperado \"!=\"",
        "esperado <",//"Era esperado \"<\"",
        "esperado >",//"Era esperado \">\"",
        "esperado +",//"Era esperado \"+\"",
        "esperado -",//"Era esperado \"-\"",
        "esperado *",//"Era esperado \"*\"",
        "esperado /",//"Era esperado \"/\"",
        "esperado fun",//"<programa> inválido",
        "esperado identificador if in out repeat while",//"<lista_instrucoes> inválido",
        "esperado identificador if in out repeat while }",//"<lista_instrucoes1> inválido",
        "esperado identificador if in out repeat while",//"<instrucao> inválido",
        "esperado ; = :",//"<instrucao1> inválido",
        "esperado identificador if in out repeat while",//"<comando> inválido",
        "esperado identificador",//"<lista_identificadores> inválido",
        "esperado , ; = : )",//"<lista_identificadores1> inválido",
        "esperado constante_int constante_float constante_string false true",//"<valor> inválido",
        "esperado identificador",//"<cmd_atribuicao> inválido",
        "esperado in",//"<cmd_entrada> inválido",
        "esperado identificador constante_string",//"<lista_entrada> inválido",
        "esperado ; )",//"<lista_entrada1> inválido",
        "esperado identificador constante_string",//"<entrada> inválido",
        "esperado out",//"<cmd_saida> inválido",
        "esperado if",//"<cmd_selecao> inválido",
        "esperado else ;",//"<cmd_selecao1> inválido",
        "esperado repeat while",//"<cmd_repeticao> inválido",
        "esperado  expressao",//"<lista_expressoes> inválido",
        "esperado , )",//"<lista_expressoes1> inválido",
        "esperado identificador if in out repeat while",//"<lista_comandos> inválido",
        "esperado identificador if in out repeat while }",//"<lista_comandos1> inválido",
        "esperado expressao",//"<expressao> inválido",
        "esperado expressao",//"<expressao_> inválido",
        "esperado expressao",//"<elemento> inválido",
        "esperado expressao",//"<relacional> inválido",
        "esperado expressao",//"<relacional_> inválido",
        "esperado == != < >",//"<operador_relacional> inválido",
        "esperado expressao",//"<aritmetica> inválido",
        "esperado expressao",//"<aritmetica_> inválido",
        "esperado expressao",//"<termo> inválido",
        "esperado expressao",//"<termo_> inválido",
        "esperado expressao"//"<fator> inválido"
    };
}
