#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = br.edu.furb.compilador.gals
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions
prefixo: _i | _f | _b | _s
maiusculo: [A-Z]
minusculo: [a-z]

digito: [0-9]
posfixo: i | f | s | b
minusculo_digito: {minusculo} | {digito}

comentario_linha: #.*
comentario_bloco: \[ [^\[\]]*\]
#Tokens
// palavra reservada
palavra_reservada: {minusculo} {minusculo}* 

// identificador
identificador: {prefixo}(({minusculo}|{maiusculo}{minusculo_digito})({minusculo_digito}|{maiusculo}{minusculo_digito})*{maiusculo}?|{maiusculo} )

// constante_int
int: [1-9]{digito}*|0

// constante_float
float: ([1-9]{digito}*|0)\.({digito}*[1-9]|0)

// constante_string
string: \"([^\n\"\\%]|%{posfixo})*\"


// relacao palavras reservadas
// do else false fun if in main out repeat true while
do = palavra_reservada: "do"
else = palavra_reservada: "else"
false = palavra_reservada: "false"
fun = palavra_reservada: "fun"
if = palavra_reservada: "if"
in = palavra_reservada: "in"
main = palavra_reservada: "main"
out = palavra_reservada: "out"
repeat = palavra_reservada: "repeat"
true = palavra_reservada: "true"
while = palavra_reservada: "while"


// relacao dos simbolos especiais
//  & | ! , ; = : ( ) { } == != < > + - *
"&"
"|" 
"!" 
"," 
";" 
"=" 
":" 
"(" 
")" 
"{" 
"}" 
"==" 
"!=" 
"<" 
">" 
"+"
"-" 
"*" 
"/" 

// reconhecer e ignorar caracteres de formatacao
:[\s\t\n\r]

// reconhecer e ignorar comentarios

// linha
:! {comentario_linha}

// bloco
:! {comentario_bloco}
#NonTerminals
<programa>

<lista_instrucoes>
<lista_instrucoes1>

<instrucao>

<declaracao_constante>

<declaracao_variaveis>

<comando>

<lista_identificadores>
<lista_identificadores1>

<valor>

<cmd_atribuicao>

<cmd_entrada>

<lista_entrada>
<lista_entrada1>

<entrada>

<cmd_saida>

<cmd_selecao>
<cmd_selecao1>

<cmd_repeticao>

<lista_expressoes>
<lista_expressoes1>

<lista_comandos>
<lista_comandos1>

<expressao>
#Grammar
<programa> ::= fun main "{" <lista_instrucoes> "}";

<lista_instrucoes> ::= <instrucao> ";" <lista_instrucoes1>;
<lista_instrucoes1> ::=  <lista_instrucoes> | î;

<instrucao> ::= <declaracao_constante> | <declaracao_variaveis> | <comando>;

<declaracao_constante> ::= <lista_identificadores> ":" <valor>;

<lista_identificadores> ::= identificador <lista_identificadores1>;
<lista_identificadores1> ::= "," <lista_identificadores> | î;

<valor> ::= int | float | string | true | false;


<declaracao_variaveis> ::= <lista_identificadores>;

<comando> ::= <cmd_atribuicao> | <cmd_entrada> | <cmd_saida> | <cmd_selecao> | <cmd_repeticao>;

<cmd_atribuicao> ::= <lista_identificadores> "=" <expressao>;

<cmd_entrada> ::= in "(" <lista_entrada> ")";

<lista_entrada> ::= <entrada> <lista_entrada1>;
<lista_entrada1> ::= î | ";" <lista_entrada>;

<entrada> ::= string "," <lista_identificadores> | <lista_identificadores>;

<cmd_saida> ::= out "(" <lista_expressoes> ")";

<lista_expressoes> ::=  <expressao> <lista_expressoes1>;
<lista_expressoes1> ::= î | "," <lista_expressoes>;

<cmd_selecao> ::= if "(" <expressao> ")" "{" <lista_comandos> "}" <cmd_selecao1>;
<cmd_selecao1> ::= î | else "{" <lista_comandos> "}";

<lista_comandos> ::= <comando> ";" <lista_comandos1>;
<lista_comandos1> ::= î | <lista_comandos>;

<cmd_repeticao> ::= while "(" <expressao> ")" do "{" <lista_comandos> "}" 
		  | repeat "{" <lista_comandos> "}" while "(" <expressao> ")";







